---
title: "Cleaning Data"
format: html
editor: visual
---

## Prepping

Clearing the environment, loading the libraries and saving the path to the data folder.

```{r}
#| message: false
rm(list = ls())

library(tidyverse)
library(stringr)
library(dplyr)

data_path <- "~/projects/Group25_Project/data"
```

## Barracoda

### Loading the data

```{r}
#| message: false

data_load_b_path <- file.path(data_path, "01_dat_load_barracoda.csv")

outfile_b_path <- file.path(data_path, '02_dat_clean_barracoda.csv')

data_load_b <- read_csv(file = data_load_b_path)

```

### Removing irrelevant columns

```{r}
cols_to_keep <-  c("barcode", "sample", "count.1", "log_fold_change", "p", "HLA", "Protein", "Peptide", "filename")
  
data_clean_b <- data_load_b|>
  select(all_of(cols_to_keep))
```

### Filtering significant subset

This drastically decreases the data load, from 35000+ observations to \~1000.

```{r}
data_clean_b <- data_clean_b |>
  filter(p < 0.001 & log_fold_change > 2)|>
  arrange(desc(log_fold_change))
```

### Extract information from sample column

```{r}
data_clean_b <- data_clean_b |>
  mutate(KIR_blocking = factor(case_when(str_detect(sample, "KIR") ~ "1",
                                         TRUE ~ "0"),
                               levels = c("1", "0")),
         double_positive = factor(case_when(str_detect(sample, "KIR_DP") ~ "1",
                                         TRUE ~ "0"),
                               levels = c("1", "0")),
         .after = sample,) |>
  separate_wider_delim("sample",
                       delim = "_",
                       names = c("sample_ID"),
                       too_many = "drop") |>
  mutate(cohort =
           factor(
             case_when(
               grepl("AP", sample_ID) ~ "AP",
               grepl("BS", sample_ID) ~ "BS",
               grepl("BC", sample_ID) ~ "BC",
               TRUE ~ NA ),
             levels = c("AP", "BS", "BC")),
         .after = "sample_ID")

```

### Extract information from protein column

```{r}
data_clean_b <- data_clean_b |>
  mutate(Protein =
           factor(
             case_when(
               str_detect(Protein, "QHD43415_1") ~ "ORF1",
               str_detect(Protein, "QHD43423_2") ~ "Nucleocapsid",
               str_detect(Protein, "QHD43416_1") ~ "Spike", #surface
               str_detect(Protein, "QHD43420_1") ~ "ORF6",
               str_detect(Protein, "QHD43419_1") ~ "Membrane",
               str_detect(Protein, "QHD43417_1") ~ "ORF3",
               str_detect(Protein, "QHD43421_1") ~ "ORF7",
               str_detect(Protein, "QHD43418_1") ~ "Envelope",
               str_detect(Protein, "QHI42199_1") ~ "ORF10",
               str_detect(Protein, "QHD43422_1") ~ "ORF8",
               .default = "Unknown"),
             levels = c("ORF1", "Nucleocapsid", "Spike", "ORF6", "Membrane", "ORF3",
                        "ORF7", "Envelope", "ORF10", "ORF8", "Unknown" )))
```

### Renaming all column names for consistency

```{r}
data_clean_b <- data_clean_b |>
  rename(protein = Protein,
         count = "count.1",
         peptide = Peptide
         )
```

### Export data

```{r}
write_csv(data_clean_b, outfile_b_path)
```

## Flowjo

### Loading the data

```{r}
#| message: false

data_load_f_path <- file.path(data_path, "01_dat_load_flowjo.csv")

data_load_f <- read_csv(file = data_load_f_path)

outfile_f_path <- file.path(data_path, '02_dat_clean_flowjo.csv')
```
